@ä‘äuí≤êÆ
--track0:Xé≤(%),0,1000,100,0.01
--track1:Yé≤(%),0,1000,100,0.01
--track2:ägëÂó¶,0,1000,100,0.01
--track3:Zé≤âÒì],-720,720,0,0.01
--dialog:pos,pos={0,0};help,help="https://github.com/streamwest-1629/kasaibox"

obj.setanchor("pos", 1, "line")
local ox = obj.ox - pos[1]
local oy = obj.oy - pos[2]

ox = ox * (obj.track0 * 0.01)
oy = oy * (obj.track1 * 0.01)

local zoom = (obj.track2 * 0.01)
ox = ox * zoom
oy = oy * zoom
obj.zoom = obj.zoom * zoom

local rad = math.rad(obj.rz + obj.track3)
local cos = math.cos(rad)
local sin = math.sin(rad)
local res_ox = ox * cos - oy * sin
local res_oy = ox * sin + oy * cos
obj.rz = obj.rz + obj.track3

obj.ox = res_ox + pos[1]
obj.oy = res_oy + pos[2]

@testing_Real-ESRGAN

require("kasaibox")
obj.setoption("drawtarget", "tempbuffer", obj.w * 4, obj.h * 4)

local ox = obj.ox
local oy = obj.oy
local oz = obj.oz
local rx = obj.rx
local ry = obj.ry
local rz = obj.rz
local cx = obj.cx
local cy = obj.cy
local cz = obj.cz
local zoom = obj.zoom
local alpha = obj.alpha

local origin_height = obj.h
local origin_width = obj.w
local extend_height = (origin_height * 3)
local extend_width = (origin_width * 3)
local extend_top = math.floor(extend_height / 2)
local extend_bottom = extend_height - extend_top
local extend_left = math.floor(extend_width / 2)
local extend_right = extend_width - extend_left

obj.effect("óÃàÊägí£", extend_top, extend_bottom, extend_left, extend_right)
obj.draw()

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

local data, w, h = obj.getpixeldata()

local msg = kasaibox.real_esrgan(data, w, h, extend_top, extend_bottom, extend_left, extend_right, "")
if msg ~= "" then
    -- obj.load("text", msg)
    obj.load("text", origin_height .. ", ".. extend_top .. ", ".. extend_bottom .. ", ".. h)
else
    obj.putpixeldata(data)
    obj.ox = ox * 4
    obj.oy = oy * 4
    obj.oz = oz * 4
    obj.rx = rx
    obj.ry = ry
    obj.rz = rz
    obj.cx = cx * 4
    obj.cy = cy * 4
    obj.cz = cz * 4
    obj.zoom = zoom
    obj.alpha = alpha
end

@testing_require

require("kasaibox")
local area = kasaibox.area(obj.w, obj.h)
obj.load("text", area)

@testing_scope

require("kasaibox")
local num_called = kasaibox.count_called()
obj.load("text", num_called)

@testing_dirpath

require("kasaibox")
local dlldir = kasaibox.print_dlldirpath()
obj.load("text", dlldir)


@testing_opencv

require("kasaibox")
data, w, h = obj.getpixeldata()
kasaibox.opencv_binalize(data, w, h)
obj.putpixeldata(data)
